#!/usr/bin/env node
require('dotenv').load()

/**
 * Module dependencies.
 */

const app = require('../src/server/app')
const debug = require('debug')('prisoners:server')
const http = require('http')

const socketService = require('../src/server/socket')
const applicationServices = require('../src/services')

const start = async () => {
  /**
   * Get port from environment and store in Express.
   */

  const port = normalizePort(process.env.PORT || '3000')
  app.set('port', port)

  /**
   * Create HTTP server.
   */

  await applicationServices.init()

  const server = http.createServer(app)
  socketService.init(server)

  /**
   * Listen on provided port, on all network interfaces.
   */

  server.listen(port)
  server.on('error', (err) => onError(err, port))
  server.on('listening', () => onListening(server))
}

/**
 * Normalize a port into a number, string, or false.
 */

const normalizePort = (val) => {
  const port = parseInt(val, 10)

  if (isNaN(port)) {
    // named pipe
    return val
  }

  if (port >= 0) {
    // port number
    return port
  }

  return false
}

/**
 * Event listener for HTTP server "error" event.
 */

const onError = (error, port) => {
  if (error.syscall !== 'listen') {
    throw error
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges')
      return process.exit(1)
    case 'EADDRINUSE':
      console.error(bind + ' is already in use')
      return process.exit(1)
    default:
      throw error
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

const onListening = (server) => {
  const addr = server.address()
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port
  debug('Listening on ' + bind)
}

start()
